// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/hertz-admin/gen/model"
)

func newSysRoleDept(db *gorm.DB, opts ...gen.DOOption) sysRoleDept {
	_sysRoleDept := sysRoleDept{}

	_sysRoleDept.sysRoleDeptDo.UseDB(db, opts...)
	_sysRoleDept.sysRoleDeptDo.UseModel(&model.SysRoleDept{})

	tableName := _sysRoleDept.sysRoleDeptDo.TableName()
	_sysRoleDept.ALL = field.NewAsterisk(tableName)
	_sysRoleDept.RoleID = field.NewInt64(tableName, "role_id")
	_sysRoleDept.DeptID = field.NewInt64(tableName, "dept_id")

	_sysRoleDept.fillFieldMap()

	return _sysRoleDept
}

// sysRoleDept 角色和部门关联表
type sysRoleDept struct {
	sysRoleDeptDo sysRoleDeptDo

	ALL    field.Asterisk
	RoleID field.Int64 // 角色id
	DeptID field.Int64 // 部门id

	fieldMap map[string]field.Expr
}

func (s sysRoleDept) Table(newTableName string) *sysRoleDept {
	s.sysRoleDeptDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRoleDept) As(alias string) *sysRoleDept {
	s.sysRoleDeptDo.DO = *(s.sysRoleDeptDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRoleDept) updateTableName(table string) *sysRoleDept {
	s.ALL = field.NewAsterisk(table)
	s.RoleID = field.NewInt64(table, "role_id")
	s.DeptID = field.NewInt64(table, "dept_id")

	s.fillFieldMap()

	return s
}

func (s *sysRoleDept) WithContext(ctx context.Context) ISysRoleDeptDo {
	return s.sysRoleDeptDo.WithContext(ctx)
}

func (s sysRoleDept) TableName() string { return s.sysRoleDeptDo.TableName() }

func (s sysRoleDept) Alias() string { return s.sysRoleDeptDo.Alias() }

func (s sysRoleDept) Columns(cols ...field.Expr) gen.Columns { return s.sysRoleDeptDo.Columns(cols...) }

func (s *sysRoleDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRoleDept) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["dept_id"] = s.DeptID
}

func (s sysRoleDept) clone(db *gorm.DB) sysRoleDept {
	s.sysRoleDeptDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysRoleDept) replaceDB(db *gorm.DB) sysRoleDept {
	s.sysRoleDeptDo.ReplaceDB(db)
	return s
}

type sysRoleDeptDo struct{ gen.DO }

type ISysRoleDeptDo interface {
	gen.SubQuery
	Debug() ISysRoleDeptDo
	WithContext(ctx context.Context) ISysRoleDeptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysRoleDeptDo
	WriteDB() ISysRoleDeptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysRoleDeptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysRoleDeptDo
	Not(conds ...gen.Condition) ISysRoleDeptDo
	Or(conds ...gen.Condition) ISysRoleDeptDo
	Select(conds ...field.Expr) ISysRoleDeptDo
	Where(conds ...gen.Condition) ISysRoleDeptDo
	Order(conds ...field.Expr) ISysRoleDeptDo
	Distinct(cols ...field.Expr) ISysRoleDeptDo
	Omit(cols ...field.Expr) ISysRoleDeptDo
	Join(table schema.Tabler, on ...field.Expr) ISysRoleDeptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleDeptDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleDeptDo
	Group(cols ...field.Expr) ISysRoleDeptDo
	Having(conds ...gen.Condition) ISysRoleDeptDo
	Limit(limit int) ISysRoleDeptDo
	Offset(offset int) ISysRoleDeptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleDeptDo
	Unscoped() ISysRoleDeptDo
	Create(values ...*model.SysRoleDept) error
	CreateInBatches(values []*model.SysRoleDept, batchSize int) error
	Save(values ...*model.SysRoleDept) error
	First() (*model.SysRoleDept, error)
	Take() (*model.SysRoleDept, error)
	Last() (*model.SysRoleDept, error)
	Find() ([]*model.SysRoleDept, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleDept, err error)
	FindInBatches(result *[]*model.SysRoleDept, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysRoleDept) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysRoleDeptDo
	Assign(attrs ...field.AssignExpr) ISysRoleDeptDo
	Joins(fields ...field.RelationField) ISysRoleDeptDo
	Preload(fields ...field.RelationField) ISysRoleDeptDo
	FirstOrInit() (*model.SysRoleDept, error)
	FirstOrCreate() (*model.SysRoleDept, error)
	FindByPage(offset int, limit int) (result []*model.SysRoleDept, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysRoleDeptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysRoleDeptDo) Debug() ISysRoleDeptDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleDeptDo) WithContext(ctx context.Context) ISysRoleDeptDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleDeptDo) ReadDB() ISysRoleDeptDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleDeptDo) WriteDB() ISysRoleDeptDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleDeptDo) Session(config *gorm.Session) ISysRoleDeptDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleDeptDo) Clauses(conds ...clause.Expression) ISysRoleDeptDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleDeptDo) Returning(value interface{}, columns ...string) ISysRoleDeptDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleDeptDo) Not(conds ...gen.Condition) ISysRoleDeptDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleDeptDo) Or(conds ...gen.Condition) ISysRoleDeptDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleDeptDo) Select(conds ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleDeptDo) Where(conds ...gen.Condition) ISysRoleDeptDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleDeptDo) Order(conds ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleDeptDo) Distinct(cols ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleDeptDo) Omit(cols ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleDeptDo) Join(table schema.Tabler, on ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleDeptDo) Group(cols ...field.Expr) ISysRoleDeptDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleDeptDo) Having(conds ...gen.Condition) ISysRoleDeptDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleDeptDo) Limit(limit int) ISysRoleDeptDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleDeptDo) Offset(offset int) ISysRoleDeptDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleDeptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleDeptDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleDeptDo) Unscoped() ISysRoleDeptDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleDeptDo) Create(values ...*model.SysRoleDept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleDeptDo) CreateInBatches(values []*model.SysRoleDept, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleDeptDo) Save(values ...*model.SysRoleDept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleDeptDo) First() (*model.SysRoleDept, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) Take() (*model.SysRoleDept, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) Last() (*model.SysRoleDept, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) Find() ([]*model.SysRoleDept, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysRoleDept), err
}

func (s sysRoleDeptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleDept, err error) {
	buf := make([]*model.SysRoleDept, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleDeptDo) FindInBatches(result *[]*model.SysRoleDept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleDeptDo) Attrs(attrs ...field.AssignExpr) ISysRoleDeptDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleDeptDo) Assign(attrs ...field.AssignExpr) ISysRoleDeptDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleDeptDo) Joins(fields ...field.RelationField) ISysRoleDeptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleDeptDo) Preload(fields ...field.RelationField) ISysRoleDeptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleDeptDo) FirstOrInit() (*model.SysRoleDept, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) FirstOrCreate() (*model.SysRoleDept, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) FindByPage(offset int, limit int) (result []*model.SysRoleDept, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleDeptDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleDeptDo) Delete(models ...*model.SysRoleDept) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleDeptDo) withDO(do gen.Dao) *sysRoleDeptDo {
	s.DO = *do.(*gen.DO)
	return s
}
