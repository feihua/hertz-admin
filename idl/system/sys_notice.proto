syntax = "proto3";

package system;

option go_package = "system";

import "api.proto";

// 添加通知公告表请求参数
message AddNoticeReq {
  string remark = 1[(api.body) = "remark"]; //备注
  string notice_title = 2[(api.body) = "noticeTitle"]; //公告标题
  int32 notice_type = 3[(api.body) = "noticeType"]; //公告类型（1:通知,2:公告）
  string notice_content = 4[(api.body) = "noticeContent"]; //公告内容
  int32 status = 5[(api.body) = "status"]; //公告状态（0:关闭,1:正常 ）


}
message AddNoticeResp {
  string msg = 1;
  api.Code code = 2;
}

// 删除通知公告表请求参数
message DeleteNoticeReq {
  repeated int64 ids = 1[(api.body) = "ids"];
}

message DeleteNoticeResp {
  string msg = 1;
  api.Code code = 2;
}

// 更新通知公告表请求参数
message UpdateNoticeReq {
  int64 id = 1[(api.body) = "id"]; //公告ID
  string notice_title = 2[(api.body) = "noticeTitle"]; //公告标题
  int32 notice_type = 3[(api.body) = "noticeType"]; //公告类型（1:通知,2:公告）
  string notice_content = 4[(api.body) = "noticeContent"]; //公告内容
  int32 status = 5[(api.body) = "status"]; //公告状态（0:关闭,1:正常 ）
  string remark = 6[(api.body) = "remark"]; //备注
}

message UpdateNoticeResp {
  string msg = 1;
  api.Code code = 2;
}

// 更新通知公告表状态请求参数
message UpdateNoticeStatusReq {
  repeated int64 id = 1[(api.body) = "id"]; //公告ID
  int32 status = 5[(api.body) = "status"]; //公告状态（0:关闭,1:正常 ）

}

message UpdateNoticeStatusResp {
  string msg = 1;
  api.Code code = 2;
}

// 查询通知公告表详情请求参数
message QueryNoticeDetailReq {
  int64 id = 1[(api.body) = "id"]; //公告ID

}

message QueryNoticeDetailResp {
  string msg = 1;
  api.Code code = 2;
  QueryNoticeDetailData data = 3;
}

message QueryNoticeDetailData {
  int64 id = 1; //公告ID
  string notice_title = 2; //公告标题
  int32 notice_type = 3; //公告类型（1:通知,2:公告）
  string notice_content = 4; //公告内容
  int32 status = 5; //公告状态（0:关闭,1:正常 ）
  string remark = 6; //备注
  string create_by = 7; //创建者
  string create_time = 8; //创建时间
  string update_by = 9; //更新者
  string update_time = 10; //更新时间
}

// 分页查询通知公告表列表请求参数
message QueryNoticeListReq {
  string notice_title = 2[(api.body) = "noticeTitle"]; //公告标题
  int32 notice_type = 3[(api.body) = "noticeType"]; //公告类型（1:通知,2:公告）
  int32 status = 4[(api.body) = "status"]; //公告状态（0:关闭,1:正常 ）

  int32 page_num = 1[(api.body) = "pageNo"]; //第几页
  int32 page_size = 5[(api.body) = "pageSize"]; //每页的数量
}


message QueryNoticeListResp {
  string msg = 1;
  api.Code code = 2;
  int64 Total = 3;
  repeated QueryNoticeListData data = 4;
}

message QueryNoticeListData {
  int64 id = 1; //公告ID
  string notice_title = 2; //公告标题
  int32 notice_type = 3; //公告类型（1:通知,2:公告）
  string notice_content = 4; //公告内容
  int32 status = 5; //公告状态（0:关闭,1:正常 ）
  string remark = 6; //备注
  string create_by = 7; //创建者
  string create_time = 8; //创建时间
  string update_by = 9; //更新者
  string update_time = 10; //更新时间
}

// 通知公告表服务
service NoticeHandler {

  // 添加通知公告表
  rpc AddNotice(AddNoticeReq) returns(AddNoticeResp) {
    option (api.post) = "/api/demo/notice/addNotice";
  }
  // 删除通知公告表
  rpc DeleteNotice(DeleteNoticeReq) returns(DeleteNoticeResp) {
    option (api.post) = "/api/demo/notice/deleteNotice";
  }
  // 更新通知公告表
  rpc UpdateNotice(UpdateNoticeReq) returns(UpdateNoticeResp) {
    option (api.post) = "/api/demo/notice/updateNotice";
  }
  // 更新通知公告表状态
  rpc UpdateNoticeStatus(UpdateNoticeStatusReq) returns(UpdateNoticeStatusResp) {
    option (api.post) = "/api/demo/notice/updateNoticeStatus";
  }
  // 查询通知公告表详情
  rpc QueryNoticeDetail(QueryNoticeDetailReq) returns(QueryNoticeDetailResp) {
    option (api.post) = "/api/demo/notice/queryNoticeDetail";
  }
  // 分页查询通知公告表列表
  rpc QueryNoticeList(QueryNoticeListReq) returns(QueryNoticeListResp) {
    option (api.post) = "/api/demo/notice/queryNoticeList";
  }

}


