syntax = "proto3";

package system;

option go_package = "system";

import "api.proto";

// 添加角色信息请求参数
message AddRoleReq {
  string remark = 1[(api.body) = "remark"]; //备注
  string role_name = 2[(api.body) = "roleName"]; //名称
  string role_key = 3[(api.body) = "roleKey"]; //角色权限字符串
  int32 data_scope = 4[(api.body) = "dataScope"]; //数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  int32 status = 5[(api.body) = "status"]; //状态(1:正常，0:禁用)

}
message AddRoleResp {
  string msg = 1;
  api.Code code = 2;
}

// 删除角色信息请求参数
message DeleteRoleReq {
  repeated int64 ids = 1[(api.body) = "ids"];
}

message DeleteRoleResp {
  string msg = 1;
  api.Code code = 2;
}

// 更新角色信息请求参数
message UpdateRoleReq {
  int64 id = 1[(api.body) = "id"]; //主键
  string role_name = 2[(api.body) = "roleName"]; //名称
  string role_key = 3[(api.body) = "roleKey"]; //角色权限字符串
  int32 data_scope = 4[(api.body) = "dataScope"]; //数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  int32 status = 5[(api.body) = "status"]; //状态(1:正常，0:禁用)
  string remark = 6[(api.body) = "remark"]; //备注
}

message UpdateRoleResp {
  string msg = 1;
  api.Code code = 2;
}

// 更新角色信息状态请求参数
message UpdateRoleStatusReq {
  repeated int64 id = 1[(api.body) = "id"]; //主键
  int32 status = 5[(api.body) = "status"]; //状态(1:正常，0:禁用)

}

message UpdateRoleStatusResp {
  string msg = 1;
  api.Code code = 2;
}

// 查询角色信息详情请求参数
message QueryRoleDetailReq {
  int64 id = 1[(api.body) = "id"]; //主键

}

message QueryRoleDetailResp {
  string msg = 1;
  api.Code code = 2;
  QueryRoleDetailData data = 3;
}

message QueryRoleDetailData {
  int64 id = 1; //主键
  string role_name = 2; //名称
  string role_key = 3; //角色权限字符串
  int32 data_scope = 4; //数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  int32 status = 5; //状态(1:正常，0:禁用)
  string remark = 6; //备注
  int32 del_flag = 7; //删除标志（0代表删除 1代表存在）
  string create_by = 8; //创建者
  string create_time = 9; //创建时间
  string update_by = 10; //更新者
  string update_time = 11; //更新时间
}

// 分页查询角色信息列表请求参数
message QueryRoleListReq {
  string role_name = 2[(api.body) = "roleName"]; //名称
  string role_key = 3[(api.body) = "roleKey"]; //角色权限字符串
  int32 data_scope = 4[(api.body) = "dataScope"]; //数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  int32 status = 5[(api.body) = "status"]; //状态(1:正常，0:禁用)

  int32 page_num = 1[(api.body) = "pageNo"]; //第几页
  int32 page_size = 9[(api.body) = "pageSize"]; //每页的数量
}


message QueryRoleListResp {
  string msg = 1;
  api.Code code = 2;
  int64 Total = 3;
  repeated QueryRoleListData data = 4;
}

message QueryRoleListData {
  int64 id = 1; //主键
  string role_name = 2; //名称
  string role_key = 3; //角色权限字符串
  int32 data_scope = 4; //数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）
  int32 status = 5; //状态(1:正常，0:禁用)
  string remark = 6; //备注
  int32 del_flag = 7; //删除标志（0代表删除 1代表存在）
  string create_by = 8; //创建者
  string create_time = 9; //创建时间
  string update_by = 10; //更新者
  string update_time = 11; //更新时间
}

// 分页查询角色菜单关联列表
message QueryRoleMenuListReq {
  int64 role_id = 1[(api.body) = "roleId"]; //名称
}


message QueryRoleMenuListResp {
  string msg = 1;
  api.Code code = 2;
  QueryRoleMenuListData data = 3;
}

message QueryRoleMenuListData {
  repeated int64 menu_ids = 1; //主键
  repeated RoleMenuListData menu_list = 2; //名称

}
message RoleMenuListData {
  int64 id = 1; //主键
  string key = 2; //主键
  string title = 3; //菜单名称
  string label = 4; //菜单名称
  int64 parent_id = 5; //父菜单ID，一级菜单为0
  bool isPenultimate = 6; //

}
message AddRoleMenuReq {
  int64 role_id = 1[(api.body) = "roleId"]; //角色ID
  repeated int64 menu_ids = 2[(api.body) = "menuIds"]; //菜单ID集合

}
message AddRoleMenuResp {
  string msg = 1;
  api.Code code = 2;
}
// 根据roleId分页查询用户信息列表
message QueryRoleUserListReq {
  string mobile = 2[(api.body) = "mobile"]; //手机号码
  string user_name = 3[(api.body) = "userName"]; //用户账号
  int64 role_id = 4[(api.body) = "roleId"]; //第几页
  int32 page_num = 1[(api.body) = "pageNo"]; //第几页
  int32 page_size = 5[(api.body) = "pageSize"]; //每页的数量
}


message QueryRoleUserListResp {
  string msg = 1;
  api.Code code = 2;
  int64 Total = 3;
  repeated QueryRoleUserListData data = 4;
}

message QueryRoleUserListData {
  int64 id = 1; //主键
  string mobile = 2; //手机号码
  string user_name = 3; //用户账号
  string nick_name = 4; //用户昵称
  string user_type = 5; //用户类型（00系统用户）
  string avatar = 6; //头像路径
  string email = 7; //用户邮箱
  int32 status = 8; //状态(1:正常，0:禁用)
  int64 dept_id = 9; //部门ID
  string remark = 10; //备注
  string create_by = 11; //创建者
  string create_time = 12; //创建时间
  string update_by = 13; //更新者
  string update_time = 14; //更新时间
}

message CancelAuthUserReq {
  int64 role_id = 1[(api.body) = "roleId"]; //角色ID
  int64 user_id = 2[(api.body) = "userId"]; //用户ID

}
message CancelAuthUserAllReq {
  int64 role_id = 1[(api.body) = "roleId"]; //角色ID
  repeated int64 user_id = 2[(api.body) = "userId"]; //用户ID

}
message SelectAuthUserAllReq {
  int64 role_id = 1[(api.body) = "roleId"]; //角色ID
  repeated int64 user_id = 2[(api.body) = "userId"]; //用户ID

}
message AuthorizationResp {
  string msg = 1;
  api.Code code = 2;
}
// 角色信息服务
service RoleHandler {

  // 添加角色信息
  rpc AddRole(AddRoleReq) returns(AddRoleResp) {
    option (api.post) = "/api/demo/role/addRole";
  }
  // 删除角色信息
  rpc DeleteRole(DeleteRoleReq) returns(DeleteRoleResp) {
    option (api.post) = "/api/demo/role/deleteRole";
  }
  // 更新角色信息
  rpc UpdateRole(UpdateRoleReq) returns(UpdateRoleResp) {
    option (api.post) = "/api/demo/role/updateRole";
  }
  // 更新角色信息状态
  rpc UpdateRoleStatus(UpdateRoleStatusReq) returns(UpdateRoleStatusResp) {
    option (api.post) = "/api/demo/role/updateRoleStatus";
  }
  // 查询角色信息详情
  rpc QueryRoleDetail(QueryRoleDetailReq) returns(QueryRoleDetailResp) {
    option (api.post) = "/api/demo/role/queryRoleDetail";
  }
  // 分页查询角色信息列表
  rpc QueryRoleList(QueryRoleListReq) returns(QueryRoleListResp) {
    option (api.post) = "/api/demo/role/queryRoleList";
  }

  // 分页查询角色菜单关联列表
  rpc QueryRoleMenuList(QueryRoleMenuListReq) returns(QueryRoleMenuListResp) {
    option (api.post) = "/api/demo/role/queryRoleMenu";
  }

  //添加角色菜单关联
  rpc AddRoleMenu(AddRoleMenuReq) returns(AddRoleMenuResp) {
    option (api.post) = "/api/demo/role/updateRoleMenu";
  }

  //查询已分配用户角色列表
  rpc QueryAllocatedList(QueryRoleUserListReq) returns(AuthorizationResp) {
    option (api.post) = "/api/demo/role/queryAllocatedList";
  }

  //查询未分配用户角色列表
  rpc QueryUnallocatedList(QueryRoleUserListReq) returns(AuthorizationResp) {
    option (api.post) = "/api/demo/role/queryUnallocatedList";
  }

  //取消授权用户
  rpc CancelAuthUser(CancelAuthUserReq) returns(AuthorizationResp) {
    option (api.post) = "/api/demo/role/cancelAuthUser";
  }

  //批量取消授权用户
  rpc BatchCancelAuthUser(CancelAuthUserAllReq) returns(AuthorizationResp) {
    option (api.post) = "/api/demo/role/batchCancelAuthUser";
  }

  //批量选择用户授权
  rpc BatchAuthUser(SelectAuthUserAllReq) returns(AuthorizationResp) {
    option (api.post) = "/api/demo/role/batchAuthUser";
  }
}


