syntax = "proto3";

package user;

option go_package = "user";

import "api.proto";

//user params start -----------
message QueryUserRoleReq {
  int64 userId = 1[(api.query) = "user_id"];
}

message QueryUserRoleResp {
  string msg = 1;
  api.Code code = 2;
  QueryUserRoleData data = 3;
}
message QueryUserRoleData {
  repeated UserRoleList sysRoleList = 1;
  repeated int64 userRoleIds = 2;
}
message UserRoleList {
  int64 id = 1;
  string createTime = 2;
  string updateTime = 3;
  int32 statusId = 4;
  int32 sort = 5;
  string roleName = 6;
  string remark = 7;
}

message UpdateUserRoleReq {
  repeated int64 RoleIds = 1[(api.query) = "roleIds"];
  int64 userId = 2[(api.query) = "userId"];
}
message UpdateUserRoleResp {
  string msg = 1;
  api.Code code = 2;
}

message QueryUserMenuReq {
  string token = 1[(api.query) = "token"];
}

message QueryUserMenuResp {
  string msg = 1;
  api.Code code = 2;
  QueryUserMenuData data = 3;
}
message QueryUserMenuData {
  repeated UserMenuList SysMenu = 1;
  repeated string BtnMenu = 2;
  string avatar = 3;
  string name = 4;
}
message UserMenuList {
  int32 id = 1;
  int32 parentId = 2;
  string name = 3;
  string path = 4;
  string apiUrl = 5;
  int32 menuType = 6;
  string icon = 7;
}

message UserListReq {
  int64 PageNo = 1[(api.body) = "page_no"];
  int64 PageSize = 2[(api.body) = "page_size"];
  string Mobile = 3[(api.body) = "mobile"];
  int32 StatusId = 4[(api.body) = "status_id"];
  string UserName = 5[(api.body) = "user_name"];
}

message UserListResp {
  string msg = 1;
  api.Code code = 2;
  int64 Total = 3;
  repeated UserListData data = 4;
}

message UserListData {
  int64 id = 1;
  string createTime = 2;
  string updateTime = 3;
  int32 statusId = 4;
  int32 sort = 5;
  string mobile = 6;
  string userName = 7;
  string remark = 8;
}

message UserSaveReq {
  string Mobile = 1[(api.body) = "mobile"];
  string UserName = 2[(api.body) = "user_name"];
  string Remark = 3[(api.body) = "remark"];
  int32 StatusID = 4[(api.body) = "status_id"];
  int32 Sort = 5[(api.body) = "sort"];
}
message UserSaveResp {
  string msg = 1;
  api.Code code = 2;
}

message UserUpdateReq {
  int64 Id = 1[(api.body) = "id"];
  int32 StatusId = 2[(api.body) = "status_id"];
  int32 Sort = 3[(api.body) = "sort"];
  string Mobile = 4[(api.body) = "mobile"];
  string UserName = 5[(api.body) = "user_name"];
  string Remark = 6[(api.body) = "remark"];
}

message UserUpdateResp {
  string msg = 1;
  api.Code code = 2;
}
message UserDeleteReq {
  repeated int64 ids = 1[(api.body) = "ids"];
}

message UserDeleteResp {
  string msg = 1;
  api.Code code = 2;
}

//user params end -----------


service UserHandler {
  rpc UserList(UserListReq) returns(UserListResp) {
    option (api.post) = "/api/user/user_list";
  }
  rpc UserSave(UserSaveReq) returns(UserSaveResp) {
    option (api.post) = "/api/user/user_save";
  }
  rpc UserUpdate(UserUpdateReq) returns(UserUpdateResp) {
    option (api.post) = "/api/user/user_update";
  }
  rpc UserDelete(UserDeleteReq) returns(UserDeleteResp) {
    option (api.post) = "/api/user/user_delete";
  }
  //user
  rpc QueryUserMenu(QueryUserMenuReq) returns(QueryUserMenuResp) {
    option (api.post) = "/api/user/query_user_menu";
  }
  //查询用户的角色
  rpc QueryUserRole(QueryUserRoleReq) returns(QueryUserRoleResp) {
    option (api.post) = "/api/user/query_user_role";
  }
  //更新用户的角色
  rpc UpdateUserRole(UpdateUserRoleReq) returns(UpdateUserRoleResp) {
    option (api.post) = "/api/user/update_user_role";
  }
}

