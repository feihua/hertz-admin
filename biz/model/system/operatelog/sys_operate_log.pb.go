// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: sys_operate_log.proto

package operatelog

import (
	_ "github.com/feihua/hertz-admin/biz/model/system/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 删除操作日志记录请求参数
type DeleteOperateLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" form:"ids" json:"ids,omitempty"`
}

func (x *DeleteOperateLogReq) Reset() {
	*x = DeleteOperateLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_operate_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOperateLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOperateLogReq) ProtoMessage() {}

func (x *DeleteOperateLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_sys_operate_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOperateLogReq.ProtoReflect.Descriptor instead.
func (*DeleteOperateLogReq) Descriptor() ([]byte, []int) {
	return file_sys_operate_log_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteOperateLogReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 查询操作日志记录详情请求参数
type QueryOperateLogDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id,omitempty"` //日志主键
}

func (x *QueryOperateLogDetailReq) Reset() {
	*x = QueryOperateLogDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_operate_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateLogDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateLogDetailReq) ProtoMessage() {}

func (x *QueryOperateLogDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_sys_operate_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateLogDetailReq.ProtoReflect.Descriptor instead.
func (*QueryOperateLogDetailReq) Descriptor() ([]byte, []int) {
	return file_sys_operate_log_proto_rawDescGZIP(), []int{1}
}

func (x *QueryOperateLogDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryOperateLogDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id,omitempty" query:"id"`                                                                              //日志主键
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" form:"title" json:"title,omitempty" query:"title"`                                                                   //模块标题
	BusinessType    int32  `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3" form:"business_type" json:"business_type,omitempty" query:"business_type"`                //业务类型（0其它 1新增 2修改 3删除）
	Method          string `protobuf:"bytes,4,opt,name=method,proto3" form:"method" json:"method,omitempty" query:"method"`                                                               //方法名称
	RequestMethod   string `protobuf:"bytes,5,opt,name=request_method,json=requestMethod,proto3" form:"request_method" json:"request_method,omitempty" query:"request_method"`            //请求方式
	OperatorType    int32  `protobuf:"varint,6,opt,name=operator_type,json=operatorType,proto3" form:"operator_type" json:"operator_type,omitempty" query:"operator_type"`                //操作类别（0其它 1后台用户 2手机端用户）
	OperateName     string `protobuf:"bytes,7,opt,name=operate_name,json=operateName,proto3" form:"operate_name" json:"operate_name,omitempty" query:"operate_name"`                      //操作人员
	DeptName        string `protobuf:"bytes,8,opt,name=dept_name,json=deptName,proto3" form:"dept_name" json:"dept_name,omitempty" query:"dept_name"`                                     //部门名称
	OperateUrl      string `protobuf:"bytes,9,opt,name=operate_url,json=operateUrl,proto3" form:"operate_url" json:"operate_url,omitempty" query:"operate_url"`                           //请求URL
	OperateIp       string `protobuf:"bytes,10,opt,name=operate_ip,json=operateIp,proto3" form:"operate_ip" json:"operate_ip,omitempty" query:"operate_ip"`                               //主机地址
	OperateLocation string `protobuf:"bytes,11,opt,name=operate_location,json=operateLocation,proto3" form:"operate_location" json:"operate_location,omitempty" query:"operate_location"` //操作地点
	OperateParam    string `protobuf:"bytes,12,opt,name=operate_param,json=operateParam,proto3" form:"operate_param" json:"operate_param,omitempty" query:"operate_param"`                //请求参数
	JsonResult      string `protobuf:"bytes,13,opt,name=json_result,json=jsonResult,proto3" form:"json_result" json:"json_result,omitempty" query:"json_result"`                          //返回参数
	Platform        string `protobuf:"bytes,14,opt,name=platform,proto3" form:"platform" json:"platform,omitempty" query:"platform"`                                                      //平台信息
	Browser         string `protobuf:"bytes,15,opt,name=browser,proto3" form:"browser" json:"browser,omitempty" query:"browser"`                                                          //浏览器类型
	Version         string `protobuf:"bytes,16,opt,name=version,proto3" form:"version" json:"version,omitempty" query:"version"`                                                          //浏览器版本
	Os              string `protobuf:"bytes,17,opt,name=os,proto3" form:"os" json:"os,omitempty" query:"os"`                                                                              //操作系统
	Arch            string `protobuf:"bytes,18,opt,name=arch,proto3" form:"arch" json:"arch,omitempty" query:"arch"`                                                                      //体系结构信息
	Engine          string `protobuf:"bytes,19,opt,name=engine,proto3" form:"engine" json:"engine,omitempty" query:"engine"`                                                              //渲染引擎信息
	EngineDetails   string `protobuf:"bytes,20,opt,name=engine_details,json=engineDetails,proto3" form:"engine_details" json:"engine_details,omitempty" query:"engine_details"`           //渲染引擎详细信息
	Extra           string `protobuf:"bytes,21,opt,name=extra,proto3" form:"extra" json:"extra,omitempty" query:"extra"`                                                                  //其他信息（可选）
	Status          int32  `protobuf:"varint,22,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`                                                             //操作状态(0:异常,正常)
	ErrorMsg        string `protobuf:"bytes,23,opt,name=error_msg,json=errorMsg,proto3" form:"error_msg" json:"error_msg,omitempty" query:"error_msg"`                                    //错误消息
	OperateTime     string `protobuf:"bytes,24,opt,name=operate_time,json=operateTime,proto3" form:"operate_time" json:"operate_time,omitempty" query:"operate_time"`                     //操作时间
	CostTime        int64  `protobuf:"varint,25,opt,name=cost_time,json=costTime,proto3" form:"cost_time" json:"cost_time,omitempty" query:"cost_time"`                                   //消耗时间
}

func (x *QueryOperateLogDetailResp) Reset() {
	*x = QueryOperateLogDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_operate_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateLogDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateLogDetailResp) ProtoMessage() {}

func (x *QueryOperateLogDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_sys_operate_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateLogDetailResp.ProtoReflect.Descriptor instead.
func (*QueryOperateLogDetailResp) Descriptor() ([]byte, []int) {
	return file_sys_operate_log_proto_rawDescGZIP(), []int{2}
}

func (x *QueryOperateLogDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryOperateLogDetailResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetBusinessType() int32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *QueryOperateLogDetailResp) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOperatorType() int32 {
	if x != nil {
		return x.OperatorType
	}
	return 0
}

func (x *QueryOperateLogDetailResp) GetOperateName() string {
	if x != nil {
		return x.OperateName
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOperateUrl() string {
	if x != nil {
		return x.OperateUrl
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOperateIp() string {
	if x != nil {
		return x.OperateIp
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOperateLocation() string {
	if x != nil {
		return x.OperateLocation
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOperateParam() string {
	if x != nil {
		return x.OperateParam
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetEngineDetails() string {
	if x != nil {
		return x.EngineDetails
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryOperateLogDetailResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetOperateTime() string {
	if x != nil {
		return x.OperateTime
	}
	return ""
}

func (x *QueryOperateLogDetailResp) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

// 分页查询操作日志记录列表请求参数
type QueryOperateLogListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,2,opt,name=title,proto3" form:"title" json:"title,omitempty"`                                                      //模块标题
	BusinessType    int32  `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3" form:"businessType" json:"businessType,omitempty"`             //业务类型（0其它 1新增 2修改 3删除）
	Method          string `protobuf:"bytes,4,opt,name=method,proto3" form:"method" json:"method,omitempty"`                                                   //方法名称
	RequestMethod   string `protobuf:"bytes,5,opt,name=request_method,json=requestMethod,proto3" form:"requestMethod" json:"requestMethod,omitempty"`          //请求方式
	OperatorType    int32  `protobuf:"varint,6,opt,name=operator_type,json=operatorType,proto3" form:"operatorType" json:"operatorType,omitempty"`             //操作类别（0其它 1后台用户 2手机端用户）
	OperateName     string `protobuf:"bytes,7,opt,name=operate_name,json=operateName,proto3" form:"operateName" json:"operateName,omitempty"`                  //操作人员
	DeptName        string `protobuf:"bytes,8,opt,name=dept_name,json=deptName,proto3" form:"deptName" json:"deptName,omitempty"`                              //部门名称
	OperateUrl      string `protobuf:"bytes,9,opt,name=operate_url,json=operateUrl,proto3" form:"operateUrl" json:"operateUrl,omitempty"`                      //请求URL
	OperateIp       string `protobuf:"bytes,10,opt,name=operate_ip,json=operateIp,proto3" form:"operateIp" json:"operateIp,omitempty"`                         //主机地址
	OperateLocation string `protobuf:"bytes,11,opt,name=operate_location,json=operateLocation,proto3" form:"operateLocation" json:"operateLocation,omitempty"` //操作地点
	Platform        string `protobuf:"bytes,14,opt,name=platform,proto3" form:"platform" json:"platform,omitempty"`                                            //平台信息
	Browser         string `protobuf:"bytes,15,opt,name=browser,proto3" form:"browser" json:"browser,omitempty"`                                               //浏览器类型
	Version         string `protobuf:"bytes,16,opt,name=version,proto3" form:"version" json:"version,omitempty"`                                               //浏览器版本
	Os              string `protobuf:"bytes,17,opt,name=os,proto3" form:"os" json:"os,omitempty"`                                                              //操作系统
	Status          int32  `protobuf:"varint,22,opt,name=status,proto3" form:"status" json:"status,omitempty"`                                                 //操作状态(0:异常,正常)
	PageNum         int32  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" form:"pageNo" json:"pageNo,omitempty"`                                   //第几页
	PageSize        int32  `protobuf:"varint,26,opt,name=page_size,json=pageSize,proto3" form:"pageSize" json:"pageSize,omitempty"`                            //每页的数量
}

func (x *QueryOperateLogListReq) Reset() {
	*x = QueryOperateLogListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_operate_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateLogListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateLogListReq) ProtoMessage() {}

func (x *QueryOperateLogListReq) ProtoReflect() protoreflect.Message {
	mi := &file_sys_operate_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateLogListReq.ProtoReflect.Descriptor instead.
func (*QueryOperateLogListReq) Descriptor() ([]byte, []int) {
	return file_sys_operate_log_proto_rawDescGZIP(), []int{3}
}

func (x *QueryOperateLogListReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryOperateLogListReq) GetBusinessType() int32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *QueryOperateLogListReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *QueryOperateLogListReq) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *QueryOperateLogListReq) GetOperatorType() int32 {
	if x != nil {
		return x.OperatorType
	}
	return 0
}

func (x *QueryOperateLogListReq) GetOperateName() string {
	if x != nil {
		return x.OperateName
	}
	return ""
}

func (x *QueryOperateLogListReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *QueryOperateLogListReq) GetOperateUrl() string {
	if x != nil {
		return x.OperateUrl
	}
	return ""
}

func (x *QueryOperateLogListReq) GetOperateIp() string {
	if x != nil {
		return x.OperateIp
	}
	return ""
}

func (x *QueryOperateLogListReq) GetOperateLocation() string {
	if x != nil {
		return x.OperateLocation
	}
	return ""
}

func (x *QueryOperateLogListReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *QueryOperateLogListReq) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *QueryOperateLogListReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryOperateLogListReq) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *QueryOperateLogListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryOperateLogListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryOperateLogListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryOperateLogListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id,omitempty" query:"id"`                                                                              //日志主键
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" form:"title" json:"title,omitempty" query:"title"`                                                                   //模块标题
	BusinessType    int32  `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3" form:"business_type" json:"business_type,omitempty" query:"business_type"`                //业务类型（0其它 1新增 2修改 3删除）
	Method          string `protobuf:"bytes,4,opt,name=method,proto3" form:"method" json:"method,omitempty" query:"method"`                                                               //方法名称
	RequestMethod   string `protobuf:"bytes,5,opt,name=request_method,json=requestMethod,proto3" form:"request_method" json:"request_method,omitempty" query:"request_method"`            //请求方式
	OperatorType    int32  `protobuf:"varint,6,opt,name=operator_type,json=operatorType,proto3" form:"operator_type" json:"operator_type,omitempty" query:"operator_type"`                //操作类别（0其它 1后台用户 2手机端用户）
	OperateName     string `protobuf:"bytes,7,opt,name=operate_name,json=operateName,proto3" form:"operate_name" json:"operate_name,omitempty" query:"operate_name"`                      //操作人员
	DeptName        string `protobuf:"bytes,8,opt,name=dept_name,json=deptName,proto3" form:"dept_name" json:"dept_name,omitempty" query:"dept_name"`                                     //部门名称
	OperateUrl      string `protobuf:"bytes,9,opt,name=operate_url,json=operateUrl,proto3" form:"operate_url" json:"operate_url,omitempty" query:"operate_url"`                           //请求URL
	OperateIp       string `protobuf:"bytes,10,opt,name=operate_ip,json=operateIp,proto3" form:"operate_ip" json:"operate_ip,omitempty" query:"operate_ip"`                               //主机地址
	OperateLocation string `protobuf:"bytes,11,opt,name=operate_location,json=operateLocation,proto3" form:"operate_location" json:"operate_location,omitempty" query:"operate_location"` //操作地点
	OperateParam    string `protobuf:"bytes,12,opt,name=operate_param,json=operateParam,proto3" form:"operate_param" json:"operate_param,omitempty" query:"operate_param"`                //请求参数
	JsonResult      string `protobuf:"bytes,13,opt,name=json_result,json=jsonResult,proto3" form:"json_result" json:"json_result,omitempty" query:"json_result"`                          //返回参数
	Platform        string `protobuf:"bytes,14,opt,name=platform,proto3" form:"platform" json:"platform,omitempty" query:"platform"`                                                      //平台信息
	Browser         string `protobuf:"bytes,15,opt,name=browser,proto3" form:"browser" json:"browser,omitempty" query:"browser"`                                                          //浏览器类型
	Version         string `protobuf:"bytes,16,opt,name=version,proto3" form:"version" json:"version,omitempty" query:"version"`                                                          //浏览器版本
	Os              string `protobuf:"bytes,17,opt,name=os,proto3" form:"os" json:"os,omitempty" query:"os"`                                                                              //操作系统
	Arch            string `protobuf:"bytes,18,opt,name=arch,proto3" form:"arch" json:"arch,omitempty" query:"arch"`                                                                      //体系结构信息
	Engine          string `protobuf:"bytes,19,opt,name=engine,proto3" form:"engine" json:"engine,omitempty" query:"engine"`                                                              //渲染引擎信息
	EngineDetails   string `protobuf:"bytes,20,opt,name=engine_details,json=engineDetails,proto3" form:"engine_details" json:"engine_details,omitempty" query:"engine_details"`           //渲染引擎详细信息
	Extra           string `protobuf:"bytes,21,opt,name=extra,proto3" form:"extra" json:"extra,omitempty" query:"extra"`                                                                  //其他信息（可选）
	Status          int32  `protobuf:"varint,22,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`                                                             //操作状态(0:异常,正常)
	ErrorMsg        string `protobuf:"bytes,23,opt,name=error_msg,json=errorMsg,proto3" form:"error_msg" json:"error_msg,omitempty" query:"error_msg"`                                    //错误消息
	OperateTime     string `protobuf:"bytes,24,opt,name=operate_time,json=operateTime,proto3" form:"operate_time" json:"operate_time,omitempty" query:"operate_time"`                     //操作时间
	CostTime        int64  `protobuf:"varint,25,opt,name=cost_time,json=costTime,proto3" form:"cost_time" json:"cost_time,omitempty" query:"cost_time"`                                   //消耗时间
}

func (x *QueryOperateLogListResp) Reset() {
	*x = QueryOperateLogListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_operate_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperateLogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperateLogListResp) ProtoMessage() {}

func (x *QueryOperateLogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_sys_operate_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperateLogListResp.ProtoReflect.Descriptor instead.
func (*QueryOperateLogListResp) Descriptor() ([]byte, []int) {
	return file_sys_operate_log_proto_rawDescGZIP(), []int{4}
}

func (x *QueryOperateLogListResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryOperateLogListResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryOperateLogListResp) GetBusinessType() int32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *QueryOperateLogListResp) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *QueryOperateLogListResp) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOperatorType() int32 {
	if x != nil {
		return x.OperatorType
	}
	return 0
}

func (x *QueryOperateLogListResp) GetOperateName() string {
	if x != nil {
		return x.OperateName
	}
	return ""
}

func (x *QueryOperateLogListResp) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOperateUrl() string {
	if x != nil {
		return x.OperateUrl
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOperateIp() string {
	if x != nil {
		return x.OperateIp
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOperateLocation() string {
	if x != nil {
		return x.OperateLocation
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOperateParam() string {
	if x != nil {
		return x.OperateParam
	}
	return ""
}

func (x *QueryOperateLogListResp) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *QueryOperateLogListResp) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *QueryOperateLogListResp) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *QueryOperateLogListResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *QueryOperateLogListResp) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *QueryOperateLogListResp) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *QueryOperateLogListResp) GetEngineDetails() string {
	if x != nil {
		return x.EngineDetails
	}
	return ""
}

func (x *QueryOperateLogListResp) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *QueryOperateLogListResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryOperateLogListResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *QueryOperateLogListResp) GetOperateTime() string {
	if x != nil {
		return x.OperateTime
	}
	return ""
}

func (x *QueryOperateLogListResp) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type OperateLogEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperateLogEmpty) Reset() {
	*x = OperateLogEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sys_operate_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateLogEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateLogEmpty) ProtoMessage() {}

func (x *OperateLogEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_sys_operate_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateLogEmpty.ProtoReflect.Descriptor instead.
func (*OperateLogEmpty) Descriptor() ([]byte, []int) {
	return file_sys_operate_log_proto_rawDescGZIP(), []int{5}
}

var File_sys_operate_log_proto protoreflect.FileDescriptor

var file_sys_operate_log_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x79, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a,
	0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x07,
	0xca, 0xbb, 0x18, 0x03, 0x69, 0x64, 0x73, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x18,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xf9, 0x05, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x06, 0x0a,
	0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0xbb, 0x18, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x10, 0xca, 0xbb, 0x18, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xca, 0xbb, 0x18, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xbb, 0x18,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xca, 0xbb, 0x18, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xca, 0xbb, 0x18, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18,
	0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xbb, 0x18, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xbb, 0x18, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x70, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0xbb,
	0x18, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x07,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0xbb, 0x18, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xbb, 0x18, 0x02, 0x6f, 0x73, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xbb, 0x18, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0c, 0xca, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf7, 0x05, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa4, 0x03, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x1b, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0xd2, 0xc1, 0x18, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x30, 0xd2, 0xc1, 0x18, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0xd2, 0xc1,
	0x18, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x3b, 0x5a, 0x39,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x69, 0x68, 0x75,
	0x61, 0x2f, 0x68, 0x65, 0x72, 0x74, 0x7a, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x62, 0x69,
	0x7a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sys_operate_log_proto_rawDescOnce sync.Once
	file_sys_operate_log_proto_rawDescData = file_sys_operate_log_proto_rawDesc
)

func file_sys_operate_log_proto_rawDescGZIP() []byte {
	file_sys_operate_log_proto_rawDescOnce.Do(func() {
		file_sys_operate_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_sys_operate_log_proto_rawDescData)
	})
	return file_sys_operate_log_proto_rawDescData
}

var file_sys_operate_log_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sys_operate_log_proto_goTypes = []interface{}{
	(*DeleteOperateLogReq)(nil),       // 0: system.DeleteOperateLogReq
	(*QueryOperateLogDetailReq)(nil),  // 1: system.QueryOperateLogDetailReq
	(*QueryOperateLogDetailResp)(nil), // 2: system.QueryOperateLogDetailResp
	(*QueryOperateLogListReq)(nil),    // 3: system.QueryOperateLogListReq
	(*QueryOperateLogListResp)(nil),   // 4: system.QueryOperateLogListResp
	(*OperateLogEmpty)(nil),           // 5: system.OperateLogEmpty
}
var file_sys_operate_log_proto_depIdxs = []int32{
	0, // 0: system.OperateLogHandler.DeleteOperateLog:input_type -> system.DeleteOperateLogReq
	1, // 1: system.OperateLogHandler.QueryOperateLogDetail:input_type -> system.QueryOperateLogDetailReq
	3, // 2: system.OperateLogHandler.QueryOperateLogList:input_type -> system.QueryOperateLogListReq
	5, // 3: system.OperateLogHandler.DeleteOperateLog:output_type -> system.OperateLogEmpty
	2, // 4: system.OperateLogHandler.QueryOperateLogDetail:output_type -> system.QueryOperateLogDetailResp
	4, // 5: system.OperateLogHandler.QueryOperateLogList:output_type -> system.QueryOperateLogListResp
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sys_operate_log_proto_init() }
func file_sys_operate_log_proto_init() {
	if File_sys_operate_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sys_operate_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOperateLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_operate_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateLogDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_operate_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateLogDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_operate_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateLogListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_operate_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperateLogListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sys_operate_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateLogEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sys_operate_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sys_operate_log_proto_goTypes,
		DependencyIndexes: file_sys_operate_log_proto_depIdxs,
		MessageInfos:      file_sys_operate_log_proto_msgTypes,
	}.Build()
	File_sys_operate_log_proto = out.File
	file_sys_operate_log_proto_rawDesc = nil
	file_sys_operate_log_proto_goTypes = nil
	file_sys_operate_log_proto_depIdxs = nil
}
