// Code generated by hertz generator.

package sys

import (
	"context"
	"hertz_admin/biz/dal/entity"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	sys "hertz_admin/biz/model/hertz/sys"
)

// MenuList .
// @router /menu_list [POST]
func MenuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.MenuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	menus, total, err := entity.QuerySysMenu(&req.MenuName, 1, 1000)

	var list []*sys.MenuListData

	for _, menu := range menus {
		list = append(list, &sys.MenuListData{
			Id:         menu.Id,
			CreateTime: menu.GmtCreate.Format("2006-01-02 15:04:05"),
			UpdateTime: menu.GmtModified.Format("2006-01-02 15:04:05"),
			StatusId:   menu.StatusId,
			Sort:       menu.Sort,
			ParentId:   menu.ParentId,
			MenuName:   menu.MenuName,
			MenuUrl:    menu.MenuUrl,
			ApiUrl:     menu.ApiUrl,
			MenuIcon:   menu.MenuIcon,
			Remark:     menu.Remark,
			MenuType:   menu.MenuType,
		})
	}

	c.JSON(200, sys.MenuListResp{
		Msg:   "successful",
		Code:  0,
		Total: total,
		Data:  list,
	})
}

// MenuSave .
// @router /menu_save [POST]
func MenuSave(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.MenuSaveReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.CreateSysMenu([]entity.SysMenu{{
		GmtCreate:   time.Now(),
		GmtModified: time.Time{},
		StatusId:    0,
		Sort:        0,
		ParentId:    0,
		MenuName:    "",
		MenuUrl:     "",
		ApiUrl:      "",
		MenuIcon:    "",
		Remark:      req.Remark,
		MenuType:    0,
	}})

	if err != nil {

	}
	resp := new(sys.MenuSaveResp)

	c.JSON(200, resp)
}

// MenuUpdate .
// @router /menu_update [POST]
func MenuUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.MenuUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.UpdateSysMenu(entity.SysMenu{
		Id:          req.Id,
		GmtCreate:   time.Now(),
		GmtModified: time.Time{},
		StatusId:    0,
		Sort:        0,
		ParentId:    0,
		MenuName:    "",
		MenuUrl:     "",
		ApiUrl:      "",
		MenuIcon:    "",
		Remark:      req.Remark,
		MenuType:    0,
	})

	if err != nil {

	}

	resp := new(sys.MenuUpdateResp)

	c.JSON(200, resp)
}

// MenuDelete .
// @router /menu_delete [POST]
func MenuDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.MenuDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.DeleteSysMenu(req.Ids)
	if err != nil {
		return
	}

	resp := new(sys.MenuDeleteResp)

	c.JSON(200, resp)
}
