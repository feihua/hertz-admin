// Code generated by hertz generator.

package sys

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"hertz_admin/biz/dal/entity"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	sys "hertz_admin/biz/model/hertz/sys"
)

// QueryUserMenu .
// @router /query_user_menu [POST]
func QueryUserMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.QueryUserMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(sys.QueryUserMenuResp)

	c.JSON(200, resp)
}

// UserList .
// @router /user_list [POST]
func UserList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.UserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	users, total, err := entity.QuerySysUser(nil, req.PageNo, req.PageSize)

	hlog.Infof("Hello, hertz %d", total)

	var list []*sys.UserListData

	for _, user := range users {
		list = append(list, &sys.UserListData{
			Id:         user.Id,
			StatusId:   user.StatusId,
			Sort:       user.Sort,
			UserNo:     user.UserNo,
			Mobile:     user.Mobile,
			RealName:   user.RealName,
			Remark:     user.Remark,
			CreateTime: user.GmtCreate.Format("2006-01-02 15:04:05"),
			UpdateTime: user.GmtModified.Format("2006-01-02 15:04:05"),
		})
	}

	c.JSON(200, sys.UserListResp{
		Msg:      "successful",
		Code:     0,
		PageNo:   req.PageNo,
		PageSize: req.PageSize,
		Total:    total,
		Data:     list,
	})
}

// UserSave .
// @router /user_save [POST]
func UserSave(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.UserSaveReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.CreateSysUser([]entity.SysUser{
		{
			GmtCreate: time.Now(),
			StatusId:  0,
			Sort:      0,
			UserNo:    0,
			Mobile:    req.Mobile,
			RealName:  req.RealName,
			Remark:    req.Remark,
			Password:  "123456",
		},
	})

	if err != nil {

	}
	resp := new(sys.UserSaveResp)

	c.JSON(200, resp)
}

// UserUpdate .
// @router /user_update [POST]
func UserUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.UserUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.UpdateSysUser(entity.SysUser{
		Id:        req.Id,
		GmtCreate: time.Now(),
		StatusId:  0,
		Sort:      0,
		UserNo:    0,
		Mobile:    req.Mobile,
		RealName:  req.RealName,
		Remark:    req.Remark,
	})

	if err != nil {

	}
	resp := new(sys.UserUpdateResp)

	c.JSON(200, resp)
}

// UserDelete .
// @router /user_delete [POST]
func UserDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.UserDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, sys.ErrorResp{
			Msg:  err.Error(),
			Code: 1,
		})
		return
	}

	err = entity.DeleteSysUser(req.Ids)
	if err != nil {
		c.JSON(200, sys.ErrorResp{
			Msg:  err.Error(),
			Code: 1,
		})
		return
	}

	resp := new(sys.UserDeleteResp)

	c.JSON(200, resp)
}
