// Code generated by hertz generator.

package sys

import (
	"context"
	"hertz_admin/biz/dal/entity"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	sys "hertz_admin/biz/model/hertz/sys"
)

// RoleList .
// @router /role_list [POST]
func RoleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.RoleListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	roles, total, err := entity.QuerySysRole(&req.RoleName, req.PageNo, req.PageSize)

	var list []*sys.RoleListData

	for _, role := range roles {
		list = append(list, &sys.RoleListData{
			Id:         role.Id,
			CreateTime: role.GmtCreate.Format("2006-01-02 15:04:05"),
			UpdateTime: role.GmtModified.Format("2006-01-02 15:04:05"),
			StatusId:   role.StatusId,
			Sort:       role.Sort,
			RoleName:   role.RoleName,
			Remark:     role.Remark,
		})
	}

	c.JSON(200, sys.RoleListResp{
		Msg:      "successful",
		Code:     0,
		PageNo:   req.PageNo,
		PageSize: req.PageSize,
		Total:    total,
		Data:     list,
	})
}

// RoleSave .
// @router /role_save [POST]
func RoleSave(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.RoleSaveReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.CreateSysRole([]entity.SysRole{{
		GmtCreate:   time.Now(),
		GmtModified: time.Time{},
		StatusId:    0,
		Sort:        0,
		RoleName:    "",
		Remark:      "",
	},
	})

	if err != nil {

	}

	resp := new(sys.RoleSaveResp)

	c.JSON(200, resp)
}

// RoleUpdate .
// @router /role_update [POST]
func RoleUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.RoleUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.UpdateSysRole(entity.SysRole{
		Id:          req.Id,
		GmtCreate:   time.Now(),
		GmtModified: time.Time{},
		StatusId:    0,
		Sort:        0,
		RoleName:    "",
		Remark:      "",
	})

	if err != nil {

	}
	resp := new(sys.RoleUpdateResp)

	c.JSON(200, resp)
}

// RoleDelete .
// @router /role_delete [POST]
func RoleDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.RoleDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	err = entity.DeleteSysUser(req.Ids)
	if err != nil {
		return
	}
	resp := new(sys.RoleDeleteResp)

	c.JSON(200, resp)
}

// QueryRoleMenu .
// @router /query_role_menu [POST]
func QueryRoleMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.QueryRoleMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(sys.QueryRoleMenuResp)

	c.JSON(200, resp)
}

// UpdateRoleMenu .
// @router /update_role_menu [POST]
func UpdateRoleMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.UpdateRoleMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(sys.UpdateRoleMenuResp)

	c.JSON(200, resp)
}
