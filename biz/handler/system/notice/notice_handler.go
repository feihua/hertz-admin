// Code generated by hertz generator.

package notice

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	notice "github.com/feihua/hertz-admin/biz/model/system/notice"
)

// AddNotice .
// @router /api/system/notice/addNotice [POST]
func AddNotice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notice.AddNoticeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notice.AddNoticeResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteNotice .
// @router /api/system/notice/deleteNotice [POST]
func DeleteNotice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notice.DeleteNoticeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notice.DeleteNoticeResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateNotice .
// @router /api/system/notice/updateNotice [POST]
func UpdateNotice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notice.UpdateNoticeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notice.UpdateNoticeResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateNoticeStatus .
// @router /api/system/notice/updateNoticeStatus [POST]
func UpdateNoticeStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notice.UpdateNoticeStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notice.UpdateNoticeStatusResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryNoticeDetail .
// @router /api/system/notice/queryNoticeDetail [POST]
func QueryNoticeDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notice.QueryNoticeDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notice.QueryNoticeDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryNoticeList .
// @router /api/system/notice/queryNoticeList [POST]
func QueryNoticeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req notice.QueryNoticeListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(notice.QueryNoticeListResp)

	c.JSON(consts.StatusOK, resp)
}
