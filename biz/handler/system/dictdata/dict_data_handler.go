// Code generated by hertz generator.

package dictdata

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	dictdata "github.com/feihua/hertz-admin/biz/model/system/dictdata"
)

// AddDictData .
// @router /api/system/dictData/addDictData [POST]
func AddDictData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictdata.AddDictDataReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dictdata.AddDictDataResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteDictData .
// @router /api/system/dictData/deleteDictData [POST]
func DeleteDictData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictdata.DeleteDictDataReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dictdata.DeleteDictDataResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictData .
// @router /api/system/dictData/updateDictData [POST]
func UpdateDictData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictdata.UpdateDictDataReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dictdata.UpdateDictDataResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictDataStatus .
// @router /api/system/dictData/updateDictDataStatus [POST]
func UpdateDictDataStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictdata.UpdateDictDataStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dictdata.UpdateDictDataStatusResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryDictDataDetail .
// @router /api/system/dictData/queryDictDataDetail [POST]
func QueryDictDataDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictdata.QueryDictDataDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dictdata.QueryDictDataDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryDictDataList .
// @router /api/system/dictData/queryDictDataList [POST]
func QueryDictDataList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictdata.QueryDictDataListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dictdata.QueryDictDataListResp)

	c.JSON(consts.StatusOK, resp)
}
