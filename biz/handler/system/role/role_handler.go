// Code generated by hertz generator.

package role

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	role "github.com/feihua/hertz-admin/biz/model/system/role"
)

// AddRole .
// @router /api/system/role/addRole [POST]
func AddRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.AddRoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AddRoleResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteRole .
// @router /api/system/role/deleteRole [POST]
func DeleteRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.DeleteRoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.DeleteRoleResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateRole .
// @router /api/system/role/updateRole [POST]
func UpdateRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.UpdateRoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.UpdateRoleResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateRoleStatus .
// @router /api/system/role/updateRoleStatus [POST]
func UpdateRoleStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.UpdateRoleStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.UpdateRoleStatusResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryRoleDetail .
// @router /api/system/role/queryRoleDetail [POST]
func QueryRoleDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.QueryRoleDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.QueryRoleDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryRoleList .
// @router /api/system/role/queryRoleList [POST]
func QueryRoleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.QueryRoleListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.QueryRoleListResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryRoleMenuList .
// @router /api/system/role/queryRoleMenu [POST]
func QueryRoleMenuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.QueryRoleMenuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.QueryRoleMenuListResp)

	c.JSON(consts.StatusOK, resp)
}

// AddRoleMenu .
// @router /api/system/role/updateRoleMenu [POST]
func AddRoleMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.AddRoleMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AddRoleMenuResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryAllocatedList .
// @router /api/system/role/queryAllocatedList [POST]
func QueryAllocatedList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.QueryRoleUserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AuthorizationResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryUnallocatedList .
// @router /api/system/role/queryUnallocatedList [POST]
func QueryUnallocatedList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.QueryRoleUserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AuthorizationResp)

	c.JSON(consts.StatusOK, resp)
}

// CancelAuthUser .
// @router /api/system/role/cancelAuthUser [POST]
func CancelAuthUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CancelAuthUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AuthorizationResp)

	c.JSON(consts.StatusOK, resp)
}

// BatchCancelAuthUser .
// @router /api/system/role/batchCancelAuthUser [POST]
func BatchCancelAuthUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CancelAuthUserAllReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AuthorizationResp)

	c.JSON(consts.StatusOK, resp)
}

// BatchAuthUser .
// @router /api/system/role/batchAuthUser [POST]
func BatchAuthUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.SelectAuthUserAllReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.AuthorizationResp)

	c.JSON(consts.StatusOK, resp)
}
