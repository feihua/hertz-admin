// Code generated by hertz generator.

package post

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	post "github.com/feihua/hertz-admin/biz/model/system/post"
)

// AddPost .
// @router /api/system/post/addPost [POST]
func AddPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.AddPostReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(post.AddPostResp)

	c.JSON(consts.StatusOK, resp)
}

// DeletePost .
// @router /api/system/post/deletePost [POST]
func DeletePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.DeletePostReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(post.DeletePostResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdatePost .
// @router /api/system/post/updatePost [POST]
func UpdatePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.UpdatePostReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(post.UpdatePostResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdatePostStatus .
// @router /api/system/post/updatePostStatus [POST]
func UpdatePostStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.UpdatePostStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(post.UpdatePostStatusResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryPostDetail .
// @router /api/system/post/queryPostDetail [POST]
func QueryPostDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.QueryPostDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(post.QueryPostDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryPostList .
// @router /api/system/post/queryPostList [POST]
func QueryPostList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.QueryPostListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(post.QueryPostListResp)

	c.JSON(consts.StatusOK, resp)
}
