// Code generated by hertz generator.

package dicttype

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	dicttype "github.com/feihua/hertz-admin/biz/model/system/dicttype"
)

// AddDictType .
// @router /api/system/dictType/addDictType [POST]
func AddDictType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dicttype.AddDictTypeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dicttype.AddDictTypeResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteDictType .
// @router /api/system/dictType/deleteDictType [POST]
func DeleteDictType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dicttype.DeleteDictTypeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dicttype.DeleteDictTypeResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictType .
// @router /api/system/dictType/updateDictType [POST]
func UpdateDictType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dicttype.UpdateDictTypeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dicttype.UpdateDictTypeResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictTypeStatus .
// @router /api/system/dictType/updateDictTypeStatus [POST]
func UpdateDictTypeStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dicttype.UpdateDictTypeStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dicttype.UpdateDictTypeStatusResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryDictTypeDetail .
// @router /api/system/dictType/queryDictTypeDetail [POST]
func QueryDictTypeDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dicttype.QueryDictTypeDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dicttype.QueryDictTypeDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryDictTypeList .
// @router /api/system/dictType/queryDictTypeList [POST]
func QueryDictTypeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dicttype.QueryDictTypeListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dicttype.QueryDictTypeListResp)

	c.JSON(consts.StatusOK, resp)
}
