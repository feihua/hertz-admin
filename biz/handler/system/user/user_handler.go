// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	user "github.com/feihua/hertz-admin/biz/model/system/user"
)

// AddUser .
// @router /api/system/user/addUser [POST]
func AddUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.AddUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.AddUserResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteUser .
// @router /api/system/user/deleteUser [POST]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.DeleteUserResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateUser .
// @router /api/system/user/updateUser [POST]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UpdateUserResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateUserStatus .
// @router /api/system/user/updateUserStatus [POST]
func UpdateUserStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UpdateUserStatusResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryUserDetail .
// @router /api/system/user/queryUserDetail [POST]
func QueryUserDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.QueryUserDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryUserList .
// @router /api/system/user/queryUserList [POST]
func QueryUserList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.QueryUserListResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryUserMenu .
// @router /api/system/user/queryUserMenu [GET]
func QueryUserMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserInfoResp)

	c.JSON(consts.StatusOK, resp)
}

// QueryUserRoleList .
// @router /api/system/user/queryUserRole [POST]
func QueryUserRoleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserRoleListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.QueryUserRoleListResp)

	c.JSON(consts.StatusOK, resp)
}

// AddUserRole .
// @router /api/system/user/updateUserRole [POST]
func AddUserRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.AddUserRoleResp)

	c.JSON(consts.StatusOK, resp)
}
